# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: batch/v1
kind: Job
metadata:
  name: ${name}
spec:
  parallelism: ${parallel}
  ttlSecondsAfterFinished: 30
  template:
    metadata:
      labels:
        app: ${name}
      annotations:
        gke-gcsfuse/volumes: "true"
        gke-gcsfuse/cpu-request: "0"
        gke-gcsfuse/memory-request: "0"
        gke-gcsfuse/ephemeral-storage-request: "1Gi"
    spec:
      nodeSelector:
        cloud.google.com/compute-class: spot-capacity
      initContainers:
      - name: workload
        image: ${workload_image}
        args: ${jsonencode(workload_args)}
        restartPolicy: Always
        workingDir: /data
        resources:
          requests:
            memory: "1Gi"
            cpu: "100m"
          limits:
            cpu: "250m"
        volumeMounts:
        - name: gcs-data
          mountPath: /data
      containers:
      - name: agent
        image: ${agent_image}
        resources:
          requests:
            memory: "1Gi"
            cpu: "100m"
          limits:
            cpu: "250m"
        args: ["serve", "pubsub-pull",
               # subscription to pull requests (tasks) from, topic to publish responses
               "${workload_request_sub}", "${workload_response}",
               # Log to JSON
               "--logJSON",
               # Log every operation
               "--logAll",
               # Text encode protobuf on PubSub
               "--jsonPubSub=true",
               # Endpoint to dispatch the work
               "--endpoint", "${workload_endpoint}",
               # Timeout waiting for the gRPC service to be available
               "--timeout", "30s",
               # Timeout when there's no more work from Pub/Sub -- stop everything.
               "--idleTimeout", "120s",
               # NOTE: These are important so that only a small number of messages (tasks)
               # are pulled from Pub/Sub, as if they are chunky in size they need to be
               # evenly distributed.
               # Maximum number of goroutines executing
               "--goroutines", "2",
               # Maximum number of outstanding messages
               "--maxoutstandingmessages", "1"]
        env:
        - name: K8S_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      restartPolicy: Never
      volumes:
      - name: gcs-data
        persistentVolumeClaim:
          claimName: data-pvc
          readOnly: false

  backoffLimit: 2
  podFailurePolicy:
    rules:
    - action: FailJob
      onExitCodes:
        containerName: agent
        operator: NotIn
        values: [1]
